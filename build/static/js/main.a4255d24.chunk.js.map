{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SecretWord","event","this","props","callback","target","value","className","type","onChange","handleChange","bind","Component","GuessingWord","state","guessingWord","hint","handleSubmit","guess","setState","preventDefault","secret_word","compareWord","guessing_word","whites","blacks","word_length","length","secret_word_copy","split","guess_word_copy","i","j","onSubmit","reachedEnd","chanceNumber","GameBoard","addChance","chance","chances","secretWord","params","setSecretWord","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPASMA,G,iLAESC,GACXC,KAAKC,MAAMC,SAASH,EAAMI,OAAOC,S,+BAOjC,OACE,yBAAKC,UAAU,mBACb,2BAAOA,UAAU,mBAAmBC,KAAK,WAAWC,SAAUP,KAAKQ,aAAaC,KAAKT,a,GAZpEU,cAkBnBC,E,kDACJ,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,aAAc,GAGdC,KAAM,IAKR,EAAKC,aAAe,EAAKA,aAAaN,KAAlB,gBACpB,EAAKO,MAAQ,EAAKA,MAAMP,KAAX,gBAZF,E,yDAeAV,GAAO,IAAD,OACjBC,KAAKiB,SAAS,CAACJ,aAAcd,EAAMI,OAAO,GAAGC,QAAQ,WACnD,EAAKY,WAQPjB,EAAMmB,mB,8BAaN,IAVM,IAAD,OACDC,EAAcnB,KAAKC,MAAMmB,YACzBC,EAAgBrB,KAAKY,MAAMC,aAE3BS,EAAO,EAAEC,EAAO,EAChBC,EAAcL,EAAYM,OAE1BC,EAAiBP,EAAYQ,MAAM,IACnCC,EAAkBP,EAAcM,MAAM,IAElCE,EAAE,EAAGA,EAAEL,EAAaK,IACrBD,EAAgBC,KAAKH,EAAiBG,KACvCP,GAAS,EACTI,EAAiBG,GAAG,IACpBD,EAAgBC,GAAG,KAGzB,IAAK,IAAIA,EAAI,EAAGA,EAAIL,EAAaK,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAaM,IAC7B,GAAGA,IAAID,GACFD,EAAgBC,KAAKH,EAAiBI,GAAG,CAC1CP,GAAS,EACTG,EAAiBI,GAAG,IACpB,MAMZ,IAAIhB,EAAO,GAETA,EADCQ,GAAUC,EACJD,EAAO,KAAKC,EAAO,KAEnB,mBAMTvB,KAAKiB,SAAS,CAACH,KAAMA,IAAO,WAC1B,EAAKb,MAAM8B,SAAS,CAClBlB,aAAc,EAAKD,MAAMC,aACzBC,KAAM,EAAKF,MAAME,KACjBkB,YAAY,EACZC,aAAc,S,+BAoBlB,OACE,0BAAMF,SAAU/B,KAAKe,aAAaN,KAAKT,OACrC,2BAAOK,UAAU,eAAeC,KAAK,c,GA/FlBI,aAsGrBwB,E,kDACJ,aAAc,IAAD,8BACX,gBAeFC,UAAY,SAACC,GACX,EAAKnB,SAAS,CACZoB,QAAQ,GAAD,mBAAM,EAAKzB,MAAMyB,SAAjB,CAA0BD,OAhBnC,EAAKxB,MAAQ,CACX0B,WAAY,GACZD,QAAS,IAJA,E,0DAUCE,GACZvC,KAAKiB,SAAS,CACZqB,WAAaC,M,+BAqBf,OACE,yBAAKlC,UAAU,aACb,kBAAC,EAAD,CAAYH,SAAUF,KAAKwC,cAAc/B,KAAKT,QAC9C,kBAAC,EAAD,CAAcoB,YAAapB,KAAKY,MAAM0B,WAAYP,SAAU/B,KAAKmC,YAEhEnC,KAAKY,MAAMyB,QAAQI,KAAI,SAAAL,GAAM,OAC5B,yBAAK/B,UAAU,OACb,yBAAKqC,IAAKN,EAAOH,aAAc5B,UAAU,gBAAgB+B,EAAOvB,cAChE,yBAAK6B,IAAKN,EAAOH,aAAc5B,UAAU,gBAAzC,IAA0D+B,EAAOtB,MACjE,yBAAK4B,IAAKN,EAAOH,aAAc5B,UAAU,gBAAgB+B,EAAOJ,qB,GA3CpDtB,aAgETiC,E,uKATX,OACE,yBAAKtC,UAAU,OACb,wBAAIA,UAAU,cAAd,gBACA,kBAAC,EAAD,W,GALUK,aC1KEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a4255d24.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import logo from './logo.svg';\r\n// import './bWLwgP.css';\r\nimport './App.css';\r\n// import { throwStatement } from '@babel/types';\r\n// import { runInThisContext } from 'vm';\r\n\r\n\r\nclass SecretWord extends Component {\r\n\r\n  handleChange(event){\r\n    this.props.callback(event.target.value);\r\n  }\r\n  // getData(word){\r\n  //   var url = \"https://googledictionaryapi.eu-gb.mybluemix.net/?define=\"+this.state.secretWord+\"&lang=en\" \r\n  // }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"Secret-Word-Div\">\r\n        <input className=\"Secret-Word-Text\" type=\"password\" onChange={this.handleChange.bind(this)}></input>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass GuessingWord extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      guessingWord: \"\",\r\n      // whites: 0,\r\n      // blacks: 0,\r\n      hint: \"\",\r\n    };\r\n    // alert(\"hello guessing word constr\");\r\n\r\n    // this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.guess = this.guess.bind(this);\r\n  }\r\n\r\n  handleSubmit(event){\r\n    this.setState({guessingWord: event.target[0].value}, () => {\r\n      this.guess();\r\n      // this.props.onSubmit({\r\n      //   guessingWord: this.state.guessingWord,\r\n      //   whites: this.state.whites,\r\n      //   blacks: this.state.blacks, \r\n      //   reachedEnd: false, \r\n      // })\r\n    });\r\n    event.preventDefault();\r\n  }\r\n\r\n  guess(){\r\n    var secret_word = this.props.compareWord;\r\n    var guessing_word = this.state.guessingWord;\r\n    \r\n    var whites=0,blacks=0;\r\n    var word_length = secret_word.length;\r\n\r\n    var secret_word_copy=secret_word.split('');\r\n    var guess_word_copy = guessing_word.split('')\r\n\r\n    for(let i=0; i<word_length; i++){\r\n        if(guess_word_copy[i]===secret_word_copy[i]){\r\n          whites +=1\r\n          secret_word_copy[i]='+';\r\n          guess_word_copy[i]='*';\r\n        }\r\n    }\r\n    for (let i = 0; i < word_length; i++) {\r\n        for (let j = 0; j < word_length; j++) {\r\n            if(j!==i){\r\n              if(guess_word_copy[i]===secret_word_copy[j]){\r\n                blacks +=1;\r\n                secret_word_copy[j]='+';\r\n                break;\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    var hint = \"\"\r\n    if(whites || blacks)\r\n      hint = whites+'W '+blacks+'B '\r\n    else \r\n      hint = \"None is matched.\"\r\n\r\n    // console.log(whites, blacks)\r\n    // check if the results are right.. as in Hint\r\n    // this.setState({whites: whites});\r\n    // this.setState({blacks: blacks});\r\n    this.setState({hint: hint}, () => {\r\n      this.props.onSubmit({\r\n        guessingWord: this.state.guessingWord,\r\n        hint: this.state.hint,\r\n        reachedEnd: false, \r\n        chanceNumber: 1,\r\n      })\r\n    })\r\n\r\n  }\r\n  \r\n  render() {\r\n    /*\r\n    var hint = \"\"\r\n    if(this.state.whites || this.state.blacks)\r\n      hint = this.state.whites+'W '+this.state.blacks+'B '\r\n    else \r\n      hint = \"Nil\"\r\n\r\n    console.log(this.state.whites, this.state.blacks, this.state.guessingWord)\r\n    // alert(this.state.guessingWord+\" up in render guessing word\")\r\n    */\r\n    \r\n    \r\n\r\n    return (\r\n      <form onSubmit={this.handleSubmit.bind(this)} >\r\n        <input className=\"u-full-width\" type=\"text\"  />\r\n        {/* <input className=\"Guessing-Button\" type=\"submit\" value=\"Check\" /> */}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nclass GameBoard extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      secretWord: \"\",\r\n      chances: [], // all guessing words goes into this dictionary\r\n      // add more\r\n    };\r\n    // alert(this.state.secretWord+\" game board\")\r\n  }\r\n\r\n  setSecretWord(params) {\r\n    this.setState({\r\n      secretWord : params\r\n    })\r\n  }\r\n\r\n  addChance = (chance) => {\r\n    this.setState({\r\n      chances: [...this.state.chances, chance]\r\n    })\r\n  }\r\n\r\n  render(){\r\n\r\n    // Loop through this.state.chances dictionary....\r\n    /*\r\n    var hint = \"\"\r\n    if(this.state.whites || this.state.blacks)\r\n      hint = this.state.whites+'W '+this.state.blacks+'B '\r\n    else \r\n      hint = \"Nil\"\r\n    */\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <SecretWord callback={this.setSecretWord.bind(this)}/>\r\n        <GuessingWord compareWord={this.state.secretWord} onSubmit={this.addChance} />\r\n        {/* {JSON.stringify(this.state.chances)} */}\r\n        {this.state.chances.map(chance => (\r\n          <div className=\"row\">\r\n            <div key={chance.chanceNumber} className=\"four columns\">{chance.guessingWord}</div>\r\n            <div key={chance.chanceNumber} className=\"four columns\"> {chance.hint}</div>\r\n            <div key={chance.chanceNumber} className=\"four columns\">{chance.reachedEnd}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className=\"App-Header\">Word Puzzle!</h1>\r\n        <GameBoard />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}